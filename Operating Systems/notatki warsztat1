O TERMINALACH STERUJĄCYCH:
Processes are grouped together into process groups. Process groups are grouped together into sessions. A session may or may not have a controlling terminal (ctty).

The ctty controls processes by sending signals to them, hence the name. A process will never receive a signal from a terminal that is not its ctty, although it may receive a signal from a process that is running with a different ctty.

In a session, a single process group can be in the foreground, and all others will be in the background. Processes in the foreground process group can be thought of as being in the foreground. The idea is that foreground processes are the ones that the user can directly interact with through the terminal at the given time, and then there are other processes "running in the background" that the user cannot directly interact with through the terminal. Normally when you start a new process from the shell, it is started in the foreground, and the shell itself goes into the background until the foreground processes terminate. Then the shell puts itself back into the foreground. Notice that while the shell is in the background, any input you type in goes to the foreground, and after the shell has returned to the foreground, you can type in commands that will go to the shell. Background processes are not allowed to read from their ctty, and may or may not be allowed to write to it. Keyboard signals, like the SIGINT produced by Ctrl+C, are only sent to foreground processes.

1. ps -o pid= -o cmd= -o gid= -o ppid= -o tty= -C cmd
wiadomo, co się dzieje, cmd nazwa procesu, -o to output format
-A wszystkie procesy
-a wszystkie poza liderem sesji i niezwiązanymi z aktywnym terminalem 

Wątki jądra nie są przypadkiem dziećmi kthreadd ?
ps f -> las ( ps --forest, ps -H)

-T -pokazuje wątki
-m pokazuje wątki procesu pod procesem
-L -też pokazuje wątki
systemd ma pid 1 i ppid (rodzica) 0, zera nie da się sprawdzić za pomocą ps
f lub -H pokazuje drzewo/hierarchię

rodzic inita: 0
ps -p 1

Nie da się pokazać wątków razem z drzewem??

2.
kill -KILL pid
 kill podaje się id procesu i sygnał
domyślnie kill wysyła sigterm - grzecznie prosi o zakonczenie

Można wymusić zakonczenie sygnałem SIGKILL - nie da się go zablokować/zignorować/obsłużyć

xkill daje celownik do trafienia okienka do zabicia- działa tylko w X serverze

pkill umożliwia wysłanie sygnału za pomocą nazwy programu (lub id ofc), wysyła do wszystkich instancji tego programu.
pkill gedit

pgrep znajduje procesy spełniające wszystkie wskazane kryteria.
pgrep -U username -c 

3.
ps pokaże mi bash 
ps -A f - wypisze drzewo
ps -f wypisze moje procesy w tej sesji z detalami

Po zabiciu rodzica proces osierocony został przygarnięty przez proces init --user

Hangup spowodował zamknięcie basha i wszystkich jego dzieci. 
Hangup mówi o rozłączeniu się terminala kontrolującego, lub o śmierci procesu kontrolującego.

The shell exits by default upon receipt of a SIGHUP. Before exiting, an interactive shell resends the SIGHUP to all jobs, running or stopped. Stopped jobs are sent SIGCONT to ensure that they receive the SIGHUP. To prevent the shell from sending the SIGHUP signal to a particular job, it should be removed from the jobs table with the disown builtin (see Job Control Builtins) or marked to not receive SIGHUP using disown -h. 

4. 
W TYM ZADANIU UZYWAM :
ps -A -o pid -o comm -o ppid -o pgid -o sid -o tty

Grupa procesów - zbiór procesów, które dzielą ten sam identyfikator grupy procesów. Sygnał od grupy procesów dostarcza się do wszystkich procesów w grupie.
Np. kiedy w terminalu uruchamiamy proces, albo wywołujemy serię procesów poprzez pipeliny, to wtedy tworzy się jeden lub więcej procesów. Pierwszy stworzony proces to lider grupy procesów, wszystkie procesy w jego grupie dostają ten sam PGID = PID lidera.

Grupa proc. pierwszoplanowych, to ta, która działa na pierwszym planie w terminalu i jako jedyna może pobierać dane z wejścia terminala.

Sesja to zbiór grup procesów. Pierwszy proces w sesji staje się liderem sesji i jego identyfikator jest SID wszystkich procesów w tej samej sesji.

Jeśli lider sesji nawiąże połączenie z terminalem, to ten terminal jest terminalem sterującym, a lider sesji staje się procesem sterującym. - Jeśli terminal się zamknie, to ten proces sterujący dostanie SIGHUP. (i wszystkie inne też)
Jeśli umrze proces sterujący - sesja dostaje SIGHUP

Np. powłoka będzie liderem sesji i procesem sterującym, bo jest połączona z terminalem. wszystkie procesy jakie odpalimy będą w tej samej sesji. Kazdy proces odpalony z terminala będzie w swojej grupie procesów.

Terminal to urządzenie do komunikacji między użytkownikiem a procesem.
ps --sid <numer sesji>
ps -t <numer/identyfikator terminalu>
Wyswietl procesy posortowane po sesji - proces z sid = pid jest liderem sesji.
ps -A --sort=sid,pgid,pid,ppid -o sid -o pgid -o pid -o comm -o ppid -o tty

Wprowadzono rozróżnienie na sesje i grupy procesów, by ułatwić kontrolę nad zadaniami. Grupy procesów są defacto zadaniami. Jeśli chcemy coś zrobić na zadaniu, to z automatu oznacza to, że musimy zrobić to samo na wszystkich procesach. Dla ułatwienia połaczono procesy powiązane ze sobą w grupy.

5.
exit status - kod wyjscia - informacja na temat zakonczenia działania procesu. Konwencyjnie 0 oznacza, ze wszystko poszło ok, inna wartość oznacza jakiś błąd. Zakonczenie procesu sygnałem zwraca kod wyjścia odpowiadający temu sygnałowi.

Proces sam z siebie może wywołać system call _exit(), w którym sam wyznaczy kod wyjscia. _exit() zwraca inta z przedziału 0-255. Jeśli został zabity przez sygnał, to zostanie mu przypisany kod oznaczający sygnał.
Kody 1,2,126-165,255 mają specjalne znaczenie.
1: ogólne błędy - dzielenie przez zero, nie ma takiego pliku, etc.
2: złe użycie wbudowanych mechanizmów powłoki empty_function() {}
126: komenda nie może zostać wykonana - /dev/null
127: command not found
128: nieprawidłowy argument do exita. exit 3.14
128+n = FATAL ERROR SIGNAL N: 
kill -KILL zwraca 128 + 9(id sigkill) = 137
ctrl+c = sigint zwraca 130 = 128 + 2
255 - exit status out of range : exit -1
większe niż reszta kodów jest brana modulo 256
w bashu wpisać:
bash
gedit&
ps -f
kill -KILL [pid drugiego basha]
echo $?

6.
/proc/pid/environ - zmienne środowiskowe
/proc/pid/cmdline - argumenty wywołania
maps:
address	perms	offset	dev	inode	pathname
[stack],[stack:<thread id>], [vdso] (virtual dynamically linked shared object), [heap]

oznaczenia uprawnien:
r- read, w - write, x - execute, s - shared, p - private(copy on write)
ROZKMINA:
#include<cstdio>
bool tab[1<<20]; //.bss - 1MB
int x=4,y=5,z=6; //.data
int main()
{
	bool tab2 = new bool[1<<10]; //heap
	while(1)
	{}
	return 0;
}

4 pierwsze linijki: 
a) plik wykonywalny
b) text bo read only
c) data, bo read write, ale mały rozmiar
d) bss bo obszar 1MB
potem sterta
potem dynamiczne biblio konsolidatora
stos, i jakieś jeszcze głupoty

7.
xeyes&
kill -STOP pid -> zatrzyma
kill -CONT pid -> przywróci do running
kill -USR1 pid
cat /proc/pid/status  szukac -> ShdPnd
maska sygnałów będzie zapalała bity tam, gdzie jest pos 
proc/${pid}/status - info o procesie
SigQ : dwie liczby przedzielone slashem, pierwsza mówi, ile sygnałów jest zakolejkowanych / druga mówi o limicie zasobów na liczbę zakolejkowanych sygnałow.
SigPnd : sygnały oczekujące dla wątku
ShdPnd : oczekujące dla całego procesu
SigBlk, SigIgn, SigCgt: maski sygnałów odpowiednio:		zablokowanych, zignorowanych i przechwyconych (złapanych).

8. 
Semantyka pliku: zasoby, do których można wysyłać dane/odbierać dane np. dokumenty, katalogi, dyski,modemy,klawiatury drukarki etc to strumienie bajtów, do których można się dostać przez system plików. Zasoby jako pliki. Udostępnia to jeden interfejs do komunikacji z wieloma rodzajami zasobów. operujemy na nich jak na plikach - możemy je open() close(), read(), write(). Kiedy otwiera się plik, tworzy sie deskryptor pliku - to on daje nam interfejs do I/O.
Bardziej wszystko jest deskryptorem pliku
Są też pseudo i wirtualne filesystemy np. proc jest czysto wirtualnym - procesy jako pliki

sockety (gniazdka) - to metoda komunikacji międzyprocesowej między procesami na tym samym komputerze lub między różnymi połączonymi przez sieć.
gniazdom przypisuje się domenę(adres i host), typ i protokół transmisji. User Datagram Protocol (UDP) i TCP (transmission control protocol)

(.so to shared object - coś jak dll)

firefox&
lsof -c firefox
albo lsof -g PGID
lsof plik pokaże wszystkie procesy, które z tego korzystają (i z głębszych plików też w koncu folder to też plik)
REG - regular file
DIR - directory
mem - memory mapped file

lsof wypisuje
cwd -> current working directory
rtd -> root directory
txt -> kod /usr/lib/firefox/firefox
potem dynamiczne biblioteki używane przez program
potem jakieś ikonki, czcionki, gtk, generalnie - szata graficzna
znowu biblioteki
potem /var/cache costam - cache przeglądarki najwyraźniej
potem urządzenia - pseudoterminale /dev/pts/0
sockety
pipy
inody - 1 inode na kazdy plik str. danych opisujaca uprawnienia, timestampy, typ pliku, rozmiar
/dev/urandom - urządzenie generujące liczby losowe
bazy danych - pliki tymczasowe etc
pliki sieciowe - IPv4 TCP - otwarte na czas transmisji

kiedy zrobi się nową kartę, to otworzą się nowe pliki sieci protokołu TCP - na czas transmisji;

9. 
strace: pokazuje system calle i sygnały
strace -o wynik ps   ---> wypisze do wynik wszystkie syscalle i sygnały

sigaction - zmiana zachowania przy otrzymaniu sygnału
execve, potem wmapowania potrzebnych bibliotek, plików do pamięci, potem zmiana handlerów sygnałów, potem czyta informacje o WSZYSTKICH procesach, potem wypisuje, co trzeba

stat(), fstat() to informacje o plikach

strace z wątkami i potomnymi za pomocą flagi -f
strace -o wynik -f ps
ltrace: pokazuje odwołania do procedur z bibliotek
strace -o wynik ps
strace -o wynik -f ps

żeby zliczyć dajemy flagę -c
strace/ltrace -o wynik -c ps

10.
time : -> user - ile CPU mieliło kod usera
		-> sys - ile CPU mieliło kod w kernel modzie na rzecz 		programu
		-> real - czas od początku uruchomienia, do zakończenia dzałania, jak stoper.
real >= user+sys, bo w międzyczasie program mógł przez ułamki sekund czekać

ulimit -t -> max czas w sekundach
ulimit -v -> max pamięc wirtualna podawana w kilobajtach

Po przekroczeniu czasu - proces zostaje zabity SIGKILL'em
po przekroczeniu pamięci - segmentation fault - kod 139

programy: wykorzystać kappa.cpp