1. IZOLACJA - przez zarezerwowanie części przestrzeni wirtualnej dla jądra.

Czemu pierwsze kilka megabajtów jest niedostępne - Chroni przed null pointerami. Note that by default, Linux intentionally leaves the first few kilobytes (or even megabytes) of each process's virtual address space unmapped, so that attempts to dereference null pointers generate an unhandled page fault resulting in an immediate SIGSEGV, killing the process.

Ktoś może zgadnąć w których miejscach w pamięci wirtualniej są które rzeczy i zrobić atak, który na ślepo uzyskuje dostęp do danych w jakimś miejscu licząc na to, że trafimy w cel

  http://duartes.org/gustavo/blog/post/anatomy-of-a-program-in-memory/

  A process image (czy to nie jest process control block?) is a copy of its state at a given point in time. It is often used for persistence. A common example is a database management system (DBMS). Most DBMS can store the state of its database or databases to a file before being closed down (see database dump). The DBMS can then be restarted later with the information in the database intact and proceed as though the software had never stopped. Another example would be the hibernate feature of many operating systems. Here, the state of all RAM memory is stored to disk, the computer is brought into an energy saving mode, then later restored to normal operation.

	Some emulators provide a facility to save an image of the system being emulated. This is often called a savestate.

PROCESS IMAGE: STALIN 128
a) user data:
	The modifiable part of the user space. May include program data, a user stack area, and programs that may be modified.
b) user program
	The program to be executed.
c) stack
	Each process has one or more last-in-first-out (LIFO) stacks associated with it. A stack is used to store parameters and calling addresses for procedure and system calls.
d) Process control block
	Data needed by the OS to control the process (see Table 3.5 ).

2. Kontekst - process counter i stan rejestrów
zasoby - (pewnie) pliki, może urządzenia I/O ... [dorobic]
Resources inclide main memory, network interfaces, file systems

Each process has a kernel stack  (or more generally, each thread has its own stack)

Just like there has to be a separate place for each process to hold its set of saved registers (in its process table entry), each process also needs its own kernel stack, to work as its execution stack when it is executing in the kernel. 

For example, if a process is doing a read syscall, it is executing the kernel code for read, and needs a stack to do this.  It could block on user input, and give up the CPU, but that whole execution environment held on the stack (and in the saved CPU state in the process table entry) has to be saved for its later use.  Another process could run meanwhile and do its own syscall, and then it needs its own kernel stack, separate from that blocked reader’s stack, to support its own kernel execution.

Since threads can also do system calls, each needs a kernel stack as well.

In Linux, the process/thread table entry and kernel stack are bundled up in one block of memory for each thread.  Other OS’s organize the memory differently, but still have both of these for each process/thread.

Sometimes the kernel stack is completely empty, notably when the process is executing user code.  Then when it does a system call, the kernel stack starts growing, and later shrinking back to nothing at the system call return.

4. dobra stronka do forka, execa i clone: http://www.makelinux.net/books/lkd2/ch03lev1sec2

fork i exec - dobre by było do wątków, bo dzielą one te same zasoby. kopiowanie wszystkiego wolne, ponoć ciężko zrobić forkiem dokładnej kopii procesu ze wszystkimi wątkami i zasobami, szczególnie na symmetric multiprocessor systemach.

CreateProcess ma skutek taki jak fork + exec, nazwa programu ma być podana przez ścieżkę. Nie ma hierarchi ojciec-dziecko, więc zamknięcie procesu stwórcy nie powoduje zamknięcia stworzonych procesów. Nie ma grup procesów. Procesy mają id i handle, w unixie są tylko id.

By stworzyć wątek:
clone(
czemu to nie? CLONE_THREAD - parent and child are in the same thread group
CLONE_FILES - share open files
CLONE_FS - share filesystem information
CLONE_VM - parent and child share address space
CLONE_SIGHAND - Parent and child share signal handlers and blocked signals.
)
clone(CLONE_VM | CLONE_FS | CLONE_FILES | CLONE_SIGHAND, 0);

By proces: (A call to fork() is
       equivalent to a call to clone(2) specifying flags as just SIGCHLD.

copy on write - zforkowany proces dzieli dane z oryginałem, dopiero w przypadku zapisu do jednego z nich każda z nich otrzymuje swoją kopię danych (kopiowane strony?)

6. Opróżnianie TLB - no, ciekawe czemu =.= mamy jak w banku (niekoniecznie, ale co tam), że dla nowego procesu nie będzie żadnych jego stron w TLB
Przełaczanie kontekstu - przełaczanie między wątkami - wymieniamy stany rejestrów, program countery etc, przełączenie trybu pracy to przejście z user moda do kernel moda lub w drugą stronę.

nieoficjalnie: jądro linuksa zapamiętuje rejestry przy przejściu do przestrzeni jądra na kernelowych stosach przypisanych wątkom